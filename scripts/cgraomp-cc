#!/usr/bin/env python3
# -*- coding:utf-8 -*-

###
#   MIT License
#   
#   Copyright (c) 2021 Amano laboratory, Keio University & Processor Research Team, RIKEN Center for Computational Science
#   
#   Permission is hereby granted, free of charge, to any person obtaining a copy of
#   this software and associated documentation files (the "Software"), to deal in
#   the Software without restriction, including without limitation the rights to
#   use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
#   of the Software, and to permit persons to whom the Software is furnished to do
#   so, subject to the following conditions:
#   
#   The above copyright notice and this permission notice shall be included in all
#   copies or substantial portions of the Software.
#   
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#   SOFTWARE.
#   
#   File:          /scripts/cgraomp-cc
#   Project:       CGRAOmp
#   Author:        Takuya Kojima in Amano Laboratory, Keio University (tkojima@am.ics.keio.ac.jp)
#   Created Date:  15-09-2021 17:22:43
#   Last Modified: 14-02-2022 08:08:49
###

from argparse import ArgumentParser
import os
import sys
from pathlib import Path
import subprocess
from pathlib import Path
from shutil import get_terminal_size
from functools import reduce
import tempfile
from collections import defaultdict
from unittest import skip

installed_dir = str(Path(__file__).parent.parent.absolute())
default_libdir = installed_dir + "/lib"

sys.path.append(default_libdir)

from cc_config.Config import *

IMM_FILES = []

try:
    import graphviz as g
    visualize_graph = lambda engine, infile, outfile : \
        g.render(engine, filepath=infile, outfile=outfile, quiet=True)
except ModuleNotFoundError:
    visualize_graph = lambda engine, infile, outfile : None

def parser():
    description = "OVERVIEW: CGRA OpenMP compiler driver based on LLVM/clang"
    usage = "{0} [options...] file...".format(os.path.basename(__file__))
    argparser = ArgumentParser(usage=usage, description=description)
    # for source files
    argparser.add_argument("files", type=str, nargs="+", help="")
    # CGRAOmp options
    argparser.add_argument("-cc", "--cgra-config", type=str, metavar="<path>",\
            help="specify the path to CGRA config file.", required=True)
    argparser.add_argument("--cgraomp-lib-path", type=str, metavar="<path>", \
            help="specify the library path to the CGRA OpenMP. " + \
            "If it is not used, a default path (INSTALL_PREFIX/lib/) will be used")
    argparser.add_argument("--enable-cgraomp-debug", action="store_true",\
                            help="enables debug message during CGRAOmp Passes")
    argparser.add_argument("-debug-only", type=str, default="",
                            help="Enable a specific type of debug output (comma separeted list of types\n")
    # general options
    argparser.add_argument("-o", dest="output", type=str, metavar="<file>",\
            help="write final binary to <file>")
    argparser.add_argument("-O0", dest="opt", action="store_const", \
            const = "-O0", help="Optimization level 0. Similar to clang -O0")
    argparser.add_argument("-O1", dest="opt", action="store_const", \
            const = "-O1", help="Optimization level 1. Similar to clang -O1")
    argparser.add_argument("-O2", dest="opt", action="store_const", \
            const = "-O2", help="Optimization level 2. Similar to clang -O2")
    argparser.add_argument("-O3", dest="opt", action="store_const", \
            const = "-O3", help="Optimization level 3. Similar to clang -O3")
    argparser.add_argument("-Os", dest="opt", action="store_const", \
            const = "-Os", help="Like -O2 with extra optimizations for size. Similar to clang -Os")
    argparser.add_argument("-Oz", dest="opt", action="store_const", \
            const = "-Oz", help="Like -Os but reduces code size further. Similar to clang -Oz")
    argparser.add_argument("-v", "--verbose", action="store_true", \
            help="Enables verbose mode")
    argparser.add_argument("--arch", type=str, default="x86_64", \
            metavar="<str>", help="specify the target cpu architecture" + \
            "(default: x86)")
    argparser.add_argument("-Xclang", dest="clang_args", action="append", \
            metavar="<arg>", help="Pass <arg> to the clang")
    argparser.add_argument("-save-temps", action="store_true", \
            help="save intermediate compilation files")
    argparser.add_argument("--preopt-pipeline", dest="preopt", action="append", \
            metavar="<opt1>,<opt2>,<opt3>,...", \
            help="specify applied optimization passes to LLVM-IR at pre-optimization stage"\
                "instead of the default setting (comma separated)")
    argparser.add_argument("--enable-custom-inst", dest="custominst_en", \
            action="store_true", \
            help="Enable user-defiend custom instructions to generate DFG")
    # for DFGs
    argparser.add_argument("--load-dfg-pass-plugin", type=str, nargs="*", \
                            help="list of paths of DFG Pass plugins")
    argparser.add_argument("--dfg-pass-pipeline", type=str,
                            help="A textual description of the pass pipeline for DFG optimization")
    argparser.add_argument("--dfg-file-prefix", type=str,
                            help="The prefix used for the data flow graph name")
    argparser.add_argument("--visualize-dfg", action="store_true",
                            help="")
    argparser.add_argument("--simplify-dfg-name", action="store_true",
                            help="Use simplified file name for DFGs")
    # for other options
    argparser.add_argument("-Xcgraomp", dest="cgraomp_args", \
                            action="append", metavar="<arg>", \
                            help="Pass <arg> to CGRA OpenMP")

    # default setting
    argparser.set_defaults(opt="-O2", clang_args=[], cgraomp_args=[], preopt=[])

    args = argparser.parse_args()

    return args

def parseCGRAOmpArgs(args):
    options = []

    debug_only_list = []
    if args.enable_cgraomp_debug:
        debug_only_list.append("cgraomp")
        if args.verbose:
            debug_only_list.append("cgraomp-verbose")
    for debug_target in args.debug_only.strip().split(","):
        if not debug_target in debug_only_list:
            debug_only_list.append(debug_target)

    if len(debug_only_list) > 0:
        options.append("-debug-only=" + ",".join(debug_only_list))

    # look up the specified libs
    if not args.load_dfg_pass_plugin is None:
        search_path = [Path(".")]
        search_path.extend([Path(p) for p in os.environ.get("LD_LIBRARY_PATH").strip(":").split(":")])
        search_path.append(Path(default_libdir))
        path_to_lib = None
        for plugin in args.load_dfg_pass_plugin:
            for p in search_path:
                glob_result = list(p.glob(plugin))
                if len(glob_result) > 0:
                    # found
                    path_to_lib = glob_result[0]
                    break
            else:
                p = Path(plugin)
                if p.is_absolute() and p.exists():
                    path_to_lib = p
                else:
                    print(ERROR_STR, plugin, "is not found")
                    sys.exit(1)
        options.append(f"--load-dfg-pass-plugin={path_to_lib}")
    if args.dfg_pass_pipeline:
        options.append("-dfg-pass-pipeline=" + args.dfg_pass_pipeline)
    if args.dfg_file_prefix:
        options.append("-dfg-file-prefix=" + args.dfg_file_prefix)
    if args.simplify_dfg_name:
        options.append("--simplify-dfg-name")

    options.extend(args.cgraomp_args)
    return options

def run(msg, cmd, verbose = False, childEnv = os.environ):
    # print(reduce(lambda x, y: x + " " + y, cmd))
    msg_fmt = "{{0:<{0}}}: ".format(int(get_terminal_size().columns / 1.5 ))
    print(msg_fmt.format(msg), file=sys.stdout, flush = True, end = "")

    proc = subprocess.Popen(cmd, stdin=subprocess.PIPE, \
                    stdout=subprocess.PIPE, stderr=subprocess.PIPE,\
                    shell=False, env = childEnv)

    (proc_out, proc_err) = proc.communicate()
    ret_code = proc.wait()
    if ret_code == 0:
        # success
        print("[" + GREEN_STR.format("  OK  ") + "]", \
                    file = sys.stdout, flush = True)
    else:
        print("[" + RED_STR.format("FAILED") + "]", \
                    file = sys.stdout, flush = True)

    if verbose:
        print("command: ", " ".join(cmd))

    if len(proc_err) > 0:
        sys.stderr.buffer.write(proc_err)
        sys.stderr.buffer.flush()

    if len(proc_out) > 0:
        sys.stdout.buffer.write(proc_out)
        sys.stdout.buffer.flush()

    return ret_code == 0

def clangIn(sources, outfile, arch, extra_args, verbose):
    pass_args = [ _ for _ in extra_args ]
    cmd = ["clang", "-O0", "-S", "-emit-llvm", "-Xclang",
            "-disable-O0-optnone", "-fopenmp"]

    # color output preference
    if "-fno-diagnostics-color" not in extra_args:
        cmd.append("-fdiagnostics-color")
    elif "-fdiagnostics-color" in extra_args:
        pass_args.remove("-fdiagnostics-color")

    # ignore opt flags at this phase
    flags = OPT_FLAGS & set(extra_args)
    if len(flags) > 0:
        for f in flags:
            pass_args.remove(f)

    cmd.append("-fopenmp-targets={0}".format(arch))
    cmd.extend(extra_args)
    cmd.extend(sources)
    cmd.extend(["-o", outfile])

    return run("Clang front-end", cmd, verbose)

def hostOpt(infile, outfile, opt_level):
    cmd = ["opt", opt_level, infile, "-S", "-o", outfile]
    return run("Optimization of host code", cmd)

def cgraPreOpt(opt_configs, infile, outfile, verbose):
    suffix = defaultdict(lambda: "th")
    for i in range(len(opt_configs)):
        config = opt_configs[i]
        cmd = ["opt", "-S"]
        cmd += config
        cmd += [infile, "-o", outfile]
        ret = run(f"{i+1}{suffix[i+1]} Pre-Optimization of CGRA kernel code", cmd, verbose)
        infile = outfile

        if not ret:
            return ret

    return ret

def unbundle(source, host_out, cgra_out, arch, verbose):
    cmd = ["clang-offload-bundler", "--unbundle", \
            "--inputs={0}".format(source), "-type=ll", \
            "--outputs={0},{1}".format(host_out, cgra_out), \
            "--targets=host-{0},{1}".format(\
                    TARGET_FMT.format(target = arch),
                    OMP_TARGET_FMT.format(target = arch))]
    return run("OpenMP target unbundling", cmd, verbose)

def passCGRAOmp(infile, outfile, libpath, config, options, verbose):

    cmd = ["opt", "-S"]
    cmd += ["-load", f"{libpath}/libCGRAOmpComponents.so"]
    cmd += ["--enable-new-pm"]
    cmd += ["-load-pass-plugin", f"{libpath}/libCGRAOmpAnnotationPass.so"]
    cmd += ["-load-pass-plugin", f"{libpath}/libCGRAModel.so"]
    cmd += ["-load-pass-plugin", f"{libpath}/libCGRAOmpPass.so"]
    cmd += ["-load-pass-plugin", f"{libpath}/libCGRAOmpVerifyPass.so"]
    cmd += ["-load-pass-plugin", f"{libpath}/libCGRAOmpDFGPass.so"]
    cmd += ["-passes=module(cgraomp)", "--cgra-dfg-plain"]
#    cmd += ["--debug-pass-manager"]
    cmd += ["-cm", config]
    cmd += [infile]
    cmd += ["-o", outfile]
    cmd += options
    return run("Verify kernel, extract DFG, and insert runtime",\
                cmd, verbose)

def main():
    args = parser()
    if (args.opt == "O0"):
        print(WARNING_STR + ": Optimization level O0 is not available")

    # filepath setting
    if args.output is None:
        outdir = "."
        if len(args.files) > 1:
            basename = "app"
        else:
            basename = Path(args.files[0]).stem
    else:
        p = Path(args.output)
        outdir = str(p.parent)
        basename = p.stem

    if args.save_temps:
        add_imm = lambda f: None
        temp_basename = "{0}/{1}".format(outdir,basename)
    else:
        # get safe temporary file name
        tf = tempfile.NamedTemporaryFile(prefix=basename + "_")
        temp_basename = tf.name
        tf.close()
        add_imm = lambda f: addImmFile(f)

    skip_clang = False
    if len(args.files) == 1:
        p = Path(args.files[0])
        if p.suffix == ".ll" or p.suffix == ".bc":
            skip_clang = True
            bundled_name = args.files[0]

    if args.custominst_en:
        args.clang_args.append("-DCGRAOMP_WITH_CUSTOM_INST")

    if not skip_clang:
        # compile C source to bundled LLVM-IR
        bundled_name = "{0}.bundled.ll".format(temp_basename)
        if clangIn(args.files, bundled_name, args.arch, \
                        args.clang_args, args.verbose):
            add_imm(bundled_name)
        else:
            return

    # unbundle LLVM-IR
    host_unbundle_name = "{0}.host.ll".format(temp_basename)
    cgra_unbundle_name = "{0}.cgra.ll".format(temp_basename)
    if unbundle(bundled_name, host_unbundle_name, cgra_unbundle_name,\
                     args.arch, args.verbose):
        add_imm(host_unbundle_name)
        add_imm(cgra_unbundle_name)
    else:
        return

    # optimize host IR
    if not hostOpt(host_unbundle_name, host_unbundle_name, args.opt):
        return

    # pre-optimize kernel IR
    if args.save_temps:
        cgra_preopt_name = "{0}.cgra.preopt.ll".format(temp_basename)
    else:
        # overwrite IR
        cgra_preopt_name = cgra_unbundle_name

    if len(args.preopt) == 0:
        # use default settings
        if args.opt == "O0":
            opt_config = PRE_OPTS_O0
        else:
            opt_config = PRE_OPTS
    else:
        opt_config = [pipeline.split(",") for pipeline in args.preopt]

    if args.custominst_en:
        opt_config[0] = ["--always-inline"] + opt_config[0]

    if not cgraPreOpt(opt_config, cgra_unbundle_name, cgra_preopt_name, args.verbose):
        return

    # run CGRAOmp Passes
    cgra_post_name = "{0}.cgra.post.ll".format(temp_basename)
    libpath = default_libdir if args.cgraomp_lib_path is None else \
                    args.cgraomp_lib_path

    options = parseCGRAOmpArgs(args)
    if passCGRAOmp(cgra_preopt_name, cgra_post_name, libpath, \
                        args.cgra_config, options, args.verbose):
        add_imm(cgra_post_name)
    else:
        return

def addImmFile(f):
    IMM_FILES.append(f)

def cleanUp():
    for f in IMM_FILES:
        os.remove(f)


if __name__ == "__main__":
    try:
        main()
    finally:
        if len(IMM_FILES) > 0:
            cleanUp()
